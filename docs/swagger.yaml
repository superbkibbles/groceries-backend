basePath: /api/v1
definitions:
  entities.Address:
    properties:
      address_line1:
        type: string
      address_line2:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_default:
        type: boolean
      name:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      state:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  entities.Category:
    properties:
      children:
        items:
          $ref: '#/definitions/entities.Category'
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      level:
        type: integer
      name:
        type: string
      parent_id:
        type: string
      path:
        items:
          type: string
        type: array
      slug:
        type: string
      updated_at:
        type: string
    type: object
  entities.Order:
    properties:
      created_at:
        type: string
      customer_id:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/entities.OrderItem'
        type: array
      payment_info:
        $ref: '#/definitions/entities.PaymentInfo'
      shipping_info:
        $ref: '#/definitions/entities.ShippingInfo'
      status:
        $ref: '#/definitions/entities.OrderStatus'
      total_amount:
        type: number
      updated_at:
        type: string
    type: object
  entities.OrderItem:
    properties:
      name:
        type: string
      price:
        type: number
      product_id:
        type: string
      quantity:
        type: integer
      sku:
        type: string
      subtotal:
        type: number
      variation_id:
        type: string
    type: object
  entities.OrderStatus:
    enum:
    - pending
    - paid
    - shipped
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusPaid
    - OrderStatusShipped
    - OrderStatusDelivered
    - OrderStatusCancelled
  entities.PaymentInfo:
    properties:
      amount:
        type: number
      method:
        type: string
      paid_at:
        type: string
      status:
        description: pending, paid, failed, refunded, etc.
        type: string
      timestamp:
        type: string
      transaction_id:
        type: string
    type: object
  entities.Product:
    properties:
      base_price:
        type: number
      categories:
        description: Category IDs the product belongs to
        items:
          type: string
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
      variations:
        items:
          $ref: '#/definitions/entities.Variation'
        type: array
    type: object
  entities.ShippingInfo:
    properties:
      address:
        type: string
      carrier:
        type: string
      city:
        type: string
      country:
        type: string
      postal_code:
        type: string
      state:
        type: string
      tracking_num:
        type: string
    type: object
  entities.User:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password_hash:
        type: string
      role:
        $ref: '#/definitions/entities.UserRole'
      updated_at:
        type: string
    type: object
  entities.UserRole:
    enum:
    - customer
    - admin
    type: string
    x-enum-varnames:
    - UserRoleCustomer
    - UserRoleAdmin
  entities.Variation:
    properties:
      attributes:
        additionalProperties: true
        type: object
      id:
        type: string
      images:
        items:
          type: string
        type: array
      price:
        type: number
      sku:
        type: string
      stock_quantity:
        type: integer
    type: object
  rest.AddressRequest:
    properties:
      address_line1:
        type: string
      address_line2:
        type: string
      city:
        type: string
      country:
        type: string
      is_default:
        type: boolean
      name:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      state:
        type: string
    required:
    - address_line1
    - city
    - country
    - name
    - phone
    - postal_code
    - state
    type: object
  rest.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 6
        type: string
    required:
    - current_password
    - new_password
    type: object
  rest.CreateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
    required:
    - name
    type: object
  rest.CreateOrderRequest:
    properties:
      customer_id:
        type: string
      shipping_info:
        $ref: '#/definitions/entities.ShippingInfo'
    required:
    - customer_id
    - shipping_info
    type: object
  rest.CreateProductRequest:
    properties:
      base_price:
        type: number
      categories:
        items:
          type: string
        type: array
      description:
        type: string
      name:
        type: string
    required:
    - base_price
    - name
    type: object
  rest.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  rest.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  rest.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/entities.User'
    type: object
  rest.OrderItemRequest:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
      variation_id:
        type: string
    required:
    - product_id
    - quantity
    - variation_id
    type: object
  rest.PaginatedResponse:
    properties:
      data: {}
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  rest.PaymentInfoRequest:
    properties:
      amount:
        type: number
      method:
        type: string
      transaction_id:
        type: string
    required:
    - amount
    - method
    - transaction_id
    type: object
  rest.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  rest.RemoveItemRequest:
    properties:
      product_id:
        type: string
      variation_id:
        type: string
    required:
    - product_id
    - variation_id
    type: object
  rest.StockUpdateRequest:
    properties:
      quantity:
        minimum: 0
        type: integer
    required:
    - quantity
    type: object
  rest.TrackingInfoRequest:
    properties:
      carrier:
        type: string
      tracking_num:
        type: string
    required:
    - carrier
    - tracking_num
    type: object
  rest.UpdateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
      slug:
        type: string
    required:
    - name
    type: object
  rest.UpdateProductRequest:
    properties:
      base_price:
        type: number
      categories:
        items:
          type: string
        type: array
      description:
        type: string
      name:
        type: string
    required:
    - base_price
    - name
    type: object
  rest.UpdateStatusRequest:
    properties:
      status:
        $ref: '#/definitions/entities.OrderStatus'
    required:
    - status
    type: object
  rest.UpdateUserRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
    required:
    - first_name
    - last_name
    type: object
  rest.VariationRequest:
    properties:
      attributes:
        additionalProperties: true
        type: object
      images:
        items:
          type: string
        type: array
      price:
        type: number
      sku:
        type: string
      stock_quantity:
        minimum: 0
        type: integer
    required:
    - attributes
    - price
    - sku
    - stock_quantity
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: A Hexagonal Architecture E-Commerce API with product variations support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: E-Commerce API
  version: "1.0"
paths:
  /categories:
    get:
      description: Get a paginated list of categories with optional filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category with the provided details
      parameters:
      - description: Category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/rest.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create a new category
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Delete a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete a category
      tags:
      - categories
    get:
      description: Get detailed information about a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get a category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update an existing category with the provided details
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/rest.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update a category
      tags:
      - categories
  /categories/{id}/children:
    get:
      description: Get all direct child categories of a parent category
      parameters:
      - description: Parent Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Category'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get child categories
      tags:
      - categories
  /categories/{id}/products:
    get:
      description: Get products in a category and optionally its subcategories
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Include products from subcategories
        in: query
        name: include_subcategories
        type: boolean
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get products by category
      tags:
      - categories
  /categories/{id}/tree:
    get:
      description: Get a complete category tree starting from a root category
      parameters:
      - description: Root Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get category tree
      tags:
      - categories
  /categories/root:
    get:
      description: Get all top-level categories (with no parent)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get root categories
      tags:
      - categories
  /categories/slug/{slug}:
    get:
      description: Get detailed information about a category by its slug
      parameters:
      - description: Category Slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get a category by slug
      tags:
      - categories
  /orders:
    get:
      description: Get a list of orders with optional filtering and pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order for a customer
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/rest.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    get:
      description: Get detailed information about an order by its ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get an order by ID
      tags:
      - orders
  /orders/{id}/items:
    delete:
      consumes:
      - application/json
      description: Remove a product variation from an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Item to remove
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/rest.RemoveItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item removed successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Remove an item from an order
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Add a product variation to an existing order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Item details
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/rest.OrderItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item added successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Add an item to an order
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update the quantity of an item in an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Item details with new quantity
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/rest.OrderItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item quantity updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update item quantity
      tags:
      - orders
  /orders/{id}/payment:
    put:
      consumes:
      - application/json
      description: Set payment information for an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment information
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/rest.PaymentInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Payment information set successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Set payment information
      tags:
      - orders
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: New status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/rest.UpdateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order status updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update order status
      tags:
      - orders
  /orders/{id}/tracking:
    put:
      consumes:
      - application/json
      description: Set shipping tracking information for an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Tracking information
        in: body
        name: tracking
        required: true
        schema:
          $ref: '#/definitions/rest.TrackingInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tracking information set successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Set tracking information
      tags:
      - orders
  /orders/customer/{customerId}:
    get:
      description: Get a list of orders for a specific customer
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get orders for a customer
      tags:
      - orders
  /products:
    get:
      description: Get a list of products with optional filtering and pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided details
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/rest.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete a product
      tags:
      - products
    get:
      description: Get detailed information about a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product's details
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/rest.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update a product
      tags:
      - products
  /products/{id}/variations:
    post:
      consumes:
      - application/json
      description: Add a new variation to an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Variation details
        in: body
        name: variation
        required: true
        schema:
          $ref: '#/definitions/rest.VariationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Variation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Add a variation to a product
      tags:
      - products
  /products/{id}/variations/{variationId}:
    delete:
      description: Remove a variation from a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Variation ID
        in: path
        name: variationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Remove a product variation
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing variation of a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Variation ID
        in: path
        name: variationId
        required: true
        type: string
      - description: Updated variation details
        in: body
        name: variation
        required: true
        schema:
          $ref: '#/definitions/rest.VariationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Variation updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update a product variation
      tags:
      - products
  /products/{id}/variations/{variationId}/stock:
    put:
      consumes:
      - application/json
      description: Update the stock quantity of a product variation
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Variation ID
        in: path
        name: variationId
        required: true
        type: string
      - description: Stock update details
        in: body
        name: stock
        required: true
        schema:
          $ref: '#/definitions/rest.StockUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Stock updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update variation stock
      tags:
      - products
  /products/category/{category}:
    get:
      description: Get a list of products in a specific category
      parameters:
      - description: Category name
        in: path
        name: category
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get products by category
      tags:
      - products
  /users/{id}:
    get:
      description: Get detailed information about a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's profile information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/rest.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update a user
      tags:
      - users
  /users/{id}/addresses:
    get:
      description: Get all addresses for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Address'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get user addresses
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add a new address for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Address details
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/rest.AddressRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Address'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Add a new address
      tags:
      - users
  /users/{id}/addresses/{addressId}:
    delete:
      description: Delete an address for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Address ID
        in: path
        name: addressId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Address deleted successfully
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete an address
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing address for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Address ID
        in: path
        name: addressId
        required: true
        type: string
      - description: Updated address details
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/rest.AddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Address updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update an address
      tags:
      - users
  /users/{id}/addresses/{addressId}/default:
    put:
      description: Set an address as the default for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Address ID
        in: path
        name: addressId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Default address set successfully
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Set default address
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Change a user's password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Password change details
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/rest.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Change a user's password
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/rest.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Login a user
      tags:
      - users
  /users/me:
    get:
      description: Get the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current user profile
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/rest.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Register a new user
      tags:
      - users
schemes:
- http
swagger: "2.0"
