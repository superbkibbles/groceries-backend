basePath: /api/v1
definitions:
  entities.Address:
    properties:
      address_line1:
        type: string
      address_line2:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_default:
        type: boolean
      name:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      state:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  entities.Cart:
    properties:
      created_at:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/entities.CartItem'
        type: array
      total_amount:
        type: number
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  entities.CartItem:
    properties:
      added_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      product_id:
        type: string
      quantity:
        type: integer
      sku:
        type: string
      subtotal:
        type: number
      updated_at:
        type: string
    type: object
  entities.Category:
    properties:
      children:
        items:
          $ref: '#/definitions/entities.Category'
        type: array
      created_at:
        type: string
      description:
        description: Legacy field for backward compatibility
        type: string
      id:
        type: string
      level:
        type: integer
      name:
        description: Legacy field for backward compatibility
        type: string
      parent_id:
        type: string
      path:
        items:
          type: string
        type: array
      slug:
        type: string
      translations:
        additionalProperties:
          $ref: '#/definitions/entities.Translation'
        description: Embedded translations
        type: object
      updated_at:
        type: string
    type: object
  entities.CustomerPaymentMethod:
    properties:
      created_at:
        type: string
      customer_id:
        type: string
      expiry_month:
        type: integer
      expiry_year:
        type: integer
      id:
        type: string
      is_default:
        type: boolean
      last4:
        type: string
      payment_method_id:
        type: string
      token:
        type: string
      updated_at:
        type: string
    type: object
  entities.Notification:
    properties:
      created_at:
        type: string
      data:
        additionalProperties: true
        type: object
      id:
        type: string
      message:
        type: string
      read_at:
        type: string
      status:
        $ref: '#/definitions/entities.NotificationStatus'
      title:
        type: string
      type:
        $ref: '#/definitions/entities.NotificationType'
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  entities.NotificationStatus:
    enum:
    - unread
    - read
    - archived
    type: string
    x-enum-varnames:
    - NotificationStatusUnread
    - NotificationStatusRead
    - NotificationStatusArchived
  entities.NotificationTemplate:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      id:
        type: string
      message_template:
        type: string
      name:
        type: string
      title_template:
        type: string
      type:
        $ref: '#/definitions/entities.NotificationType'
      updated_at:
        type: string
    type: object
  entities.NotificationType:
    enum:
    - order_status
    - payment
    - shipping
    - system
    type: string
    x-enum-varnames:
    - NotificationTypeOrderStatus
    - NotificationTypePayment
    - NotificationTypeShipping
    - NotificationTypeSystem
  entities.Order:
    properties:
      created_at:
        type: string
      customer_id:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/entities.OrderItem'
        type: array
      payment_info:
        $ref: '#/definitions/entities.PaymentInfo'
      shipping_info:
        $ref: '#/definitions/entities.ShippingInfo'
      status:
        $ref: '#/definitions/entities.OrderStatus'
      total_amount:
        type: number
      updated_at:
        type: string
    type: object
  entities.OrderItem:
    properties:
      name:
        type: string
      price:
        type: number
      product_id:
        type: string
      quantity:
        type: integer
      sku:
        type: string
      subtotal:
        type: number
    type: object
  entities.OrderStatus:
    enum:
    - pending
    - paid
    - shipped
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusPaid
    - OrderStatusShipped
    - OrderStatusDelivered
    - OrderStatusCancelled
  entities.PaymentGateway:
    properties:
      active:
        type: boolean
      config:
        additionalProperties: true
        type: object
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      provider:
        type: string
      updated_at:
        type: string
    type: object
  entities.PaymentInfo:
    properties:
      amount:
        type: number
      method:
        type: string
      paid_at:
        type: string
      status:
        description: pending, paid, failed, refunded, etc.
        type: string
      timestamp:
        type: string
      transaction_id:
        type: string
    type: object
  entities.PaymentMethod:
    properties:
      active:
        type: boolean
      config:
        additionalProperties: true
        type: object
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      type:
        $ref: '#/definitions/entities.PaymentMethodType'
      updated_at:
        type: string
    type: object
  entities.PaymentMethodType:
    enum:
    - credit_card
    - paypal
    - bank_transfer
    - cryptocurrency
    type: string
    x-enum-varnames:
    - PaymentMethodCreditCard
    - PaymentMethodPayPal
    - PaymentMethodBankTransfer
    - PaymentMethodCryptocurrency
  entities.Product:
    properties:
      attributes:
        additionalProperties: true
        type: object
      categories:
        description: Category IDs the product belongs to
        items:
          type: string
        type: array
      created_at:
        type: string
      description:
        description: Legacy field for backward compatibility
        type: string
      id:
        type: string
      images:
        items:
          type: string
        type: array
      name:
        description: Legacy field for backward compatibility
        type: string
      price:
        type: number
      sku:
        type: string
      stock_quantity:
        type: integer
      translations:
        additionalProperties:
          $ref: '#/definitions/entities.Translation'
        description: Embedded translations
        type: object
      updated_at:
        type: string
    type: object
  entities.ShippingInfo:
    properties:
      address:
        type: string
      carrier:
        type: string
      city:
        type: string
      country:
        type: string
      postal_code:
        type: string
      state:
        type: string
      tracking_num:
        type: string
    type: object
  entities.ShippingMethod:
    properties:
      active:
        type: boolean
      base_price:
        type: number
      created_at:
        type: string
      description:
        type: string
      estimated_delivery_days:
        type: integer
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  entities.ShippingRate:
    properties:
      created_at:
        type: string
      id:
        type: string
      price:
        type: number
      shipping_method_id:
        type: string
      shipping_zone_id:
        type: string
      updated_at:
        type: string
    type: object
  entities.ShippingZone:
    properties:
      countries:
        items:
          type: string
        type: array
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  entities.Translation:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  entities.User:
    properties:
      active:
        type: boolean
      addresses:
        items:
          $ref: '#/definitions/entities.Address'
        type: array
      cart:
        description: Cart items for the user
        items:
          $ref: '#/definitions/entities.CartItem'
        type: array
      cart_id:
        description: Cart ID for the user
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_new:
        description: Indicates if the user is new and needs to change to false after
          user updates their profile
        type: boolean
      last_name:
        type: string
      password_hash:
        type: string
      phone_number:
        type: string
      role:
        $ref: '#/definitions/entities.UserRole'
      updated_at:
        type: string
    type: object
  entities.UserRole:
    enum:
    - customer
    - admin
    type: string
    x-enum-varnames:
    - UserRoleCustomer
    - UserRoleAdmin
  entities.Wishlist:
    properties:
      created_at:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/entities.WishlistItem'
        type: array
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  entities.WishlistItem:
    properties:
      added_at:
        type: string
      id:
        type: string
      product_id:
        type: string
    type: object
  rest.AddItemRequest:
    properties:
      product_id:
        type: string
      quantity:
        minimum: 1
        type: integer
      variation_id:
        type: string
    required:
    - product_id
    - quantity
    - variation_id
    type: object
  rest.AddressRequest:
    properties:
      address_line1:
        type: string
      address_line2:
        type: string
      city:
        type: string
      country:
        type: string
      is_default:
        type: boolean
      name:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      state:
        type: string
    required:
    - address_line1
    - city
    - country
    - name
    - phone
    - postal_code
    - state
    type: object
  rest.CalculateShippingRequest:
    properties:
      country_code:
        type: string
      items:
        items:
          $ref: '#/definitions/entities.CartItem'
        type: array
    required:
    - country_code
    - items
    type: object
  rest.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 6
        type: string
    required:
    - current_password
    - new_password
    type: object
  rest.CheckoutRequest:
    properties:
      shipping_info:
        $ref: '#/definitions/entities.ShippingInfo'
    required:
    - shipping_info
    type: object
  rest.CreateCategoryRequest:
    properties:
      parent_id:
        type: string
      slug:
        type: string
      translations:
        additionalProperties:
          $ref: '#/definitions/entities.Translation'
        type: object
    required:
    - translations
    type: object
  rest.CreateCustomerPaymentMethodRequest:
    properties:
      customer_id:
        type: string
      expiry_month:
        type: integer
      expiry_year:
        type: integer
      is_default:
        type: boolean
      last4:
        type: string
      payment_method_id:
        type: string
      token:
        type: string
    required:
    - customer_id
    - payment_method_id
    - token
    type: object
  rest.CreateNotificationRequest:
    properties:
      data:
        additionalProperties: true
        type: object
      message:
        type: string
      title:
        type: string
      type:
        type: string
      user_id:
        type: string
    required:
    - message
    - title
    - type
    - user_id
    type: object
  rest.CreateNotificationTemplateRequest:
    properties:
      message_template:
        type: string
      name:
        type: string
      title_template:
        type: string
      type:
        type: string
    required:
    - message_template
    - name
    - title_template
    - type
    type: object
  rest.CreateOrderRequest:
    properties:
      customer_id:
        type: string
      shipping_info:
        $ref: '#/definitions/entities.ShippingInfo'
    required:
    - customer_id
    - shipping_info
    type: object
  rest.CreatePaymentGatewayRequest:
    properties:
      config:
        additionalProperties: true
        type: object
      name:
        type: string
      provider:
        type: string
    required:
    - name
    - provider
    type: object
  rest.CreatePaymentMethodRequest:
    properties:
      config:
        additionalProperties: true
        type: object
      description:
        type: string
      name:
        type: string
      type:
        type: string
    required:
    - description
    - name
    - type
    type: object
  rest.CreateProductRequest:
    properties:
      attributes:
        additionalProperties: {}
        type: object
      categories:
        items:
          type: string
        type: array
      images:
        items:
          type: string
        type: array
      price:
        type: number
      sku:
        type: string
      stock_quantity:
        minimum: 0
        type: integer
      translations:
        additionalProperties:
          $ref: '#/definitions/entities.Translation'
        type: object
    required:
    - price
    - sku
    - stock_quantity
    - translations
    type: object
  rest.CreateShippingMethodRequest:
    properties:
      base_price:
        minimum: 0
        type: number
      description:
        type: string
      estimated_delivery_days:
        minimum: 1
        type: integer
      name:
        type: string
    required:
    - base_price
    - description
    - estimated_delivery_days
    - name
    type: object
  rest.CreateShippingRateRequest:
    properties:
      price:
        minimum: 0
        type: number
      shipping_method_id:
        type: string
      shipping_zone_id:
        type: string
    required:
    - price
    - shipping_method_id
    - shipping_zone_id
    type: object
  rest.CreateShippingZoneRequest:
    properties:
      countries:
        items:
          type: string
        type: array
      name:
        type: string
    required:
    - countries
    - name
    type: object
  rest.ErrorResponse:
    properties:
      code:
        type: integer
      error:
        type: string
      message:
        type: string
    type: object
  rest.GetSupportedLanguagesResponse:
    properties:
      default_language:
        type: string
      languages:
        items:
          type: string
        type: array
    type: object
  rest.LoginRequest:
    properties:
      phone_number:
        description: |-
          Email    string `json:"email" binding:"required,email"`
          Password string `json:"password" binding:"required"`
        type: string
    required:
    - phone_number
    type: object
  rest.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/entities.User'
    type: object
  rest.OrderItemRequest:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
    required:
    - product_id
    - quantity
    type: object
  rest.PaginatedResponse:
    properties:
      data: {}
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  rest.PaymentInfoRequest:
    properties:
      amount:
        type: number
      method:
        type: string
      transaction_id:
        type: string
    required:
    - amount
    - method
    - transaction_id
    type: object
  rest.ProcessPaymentRequest:
    properties:
      amount:
        type: number
      order_id:
        type: string
      payment_method_id:
        type: string
    required:
    - amount
    - order_id
    - payment_method_id
    type: object
  rest.RefundPaymentRequest:
    properties:
      amount:
        type: number
      order_id:
        type: string
      reason:
        type: string
    required:
    - amount
    - order_id
    - reason
    type: object
  rest.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  rest.RemoveItemRequest:
    properties:
      product_id:
        type: string
    required:
    - product_id
    type: object
  rest.SendOrderStatusNotificationRequest:
    properties:
      order_id:
        type: string
      status:
        $ref: '#/definitions/entities.OrderStatus'
    required:
    - order_id
    - status
    type: object
  rest.SendPaymentNotificationRequest:
    properties:
      order_id:
        type: string
      payment_info:
        $ref: '#/definitions/entities.PaymentInfo'
    required:
    - order_id
    - payment_info
    type: object
  rest.SendShippingNotificationRequest:
    properties:
      order_id:
        type: string
      tracking_info:
        $ref: '#/definitions/entities.ShippingInfo'
    required:
    - order_id
    - tracking_info
    type: object
  rest.SendSystemNotificationRequest:
    properties:
      message:
        type: string
      title:
        type: string
      user_id:
        type: string
    required:
    - message
    - title
    - user_id
    type: object
  rest.StockUpdateRequest:
    properties:
      quantity:
        minimum: 0
        type: integer
    required:
    - quantity
    type: object
  rest.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  rest.SwitchLanguageRequest:
    properties:
      language:
        type: string
    required:
    - language
    type: object
  rest.TrackingInfoRequest:
    properties:
      carrier:
        type: string
      tracking_num:
        type: string
    required:
    - carrier
    - tracking_num
    type: object
  rest.UpdateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
      slug:
        type: string
    required:
    - name
    type: object
  rest.UpdateProductRequest:
    properties:
      attributes:
        additionalProperties: {}
        type: object
      categories:
        items:
          type: string
        type: array
      description:
        type: string
      images:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock_quantity:
        minimum: 0
        type: integer
    required:
    - name
    - price
    - sku
    - stock_quantity
    type: object
  rest.UpdateQuantityRequest:
    properties:
      quantity:
        minimum: 1
        type: integer
    required:
    - quantity
    type: object
  rest.UpdateStatusRequest:
    properties:
      status:
        $ref: '#/definitions/entities.OrderStatus'
    required:
    - status
    type: object
  rest.UpdateUserRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
    required:
    - first_name
    - last_name
    type: object
host: localhost
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: A Hexagonal Architecture E-Commerce API with product variations support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: E-Commerce API
  version: "1.0"
paths:
  /api/v1/cart:
    get:
      consumes:
      - application/json
      description: Retrieves the current user's shopping cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Cart'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get user's cart
      tags:
      - cart
  /api/v1/cart/checkout:
    post:
      consumes:
      - application/json
      description: Converts the user's cart to an order
      parameters:
      - description: Checkout information
        in: body
        name: checkout
        required: true
        schema:
          $ref: '#/definitions/rest.CheckoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Checkout cart
      tags:
      - cart
  /api/v1/cart/items:
    delete:
      consumes:
      - application/json
      description: Removes all items from the user's shopping cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Clear cart
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: Adds a product to the user's shopping cart
      parameters:
      - description: Item to add
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/rest.AddItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.CartItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Add item to cart
      tags:
      - cart
  /api/v1/cart/items/{itemId}:
    delete:
      consumes:
      - application/json
      description: Removes an item from the user's shopping cart
      parameters:
      - description: Item ID
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Remove item from cart
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Updates the quantity of an item in the user's shopping cart
      parameters:
      - description: Item ID
        in: path
        name: itemId
        required: true
        type: string
      - description: New quantity
        in: body
        name: quantity
        required: true
        schema:
          $ref: '#/definitions/rest.UpdateQuantityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update item quantity
      tags:
      - cart
  /api/v1/languages:
    get:
      consumes:
      - application/json
      description: Get the list of supported languages and default language
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.GetSupportedLanguagesResponse'
      summary: Get supported languages
      tags:
      - Language
  /api/v1/languages/switch:
    post:
      consumes:
      - application/json
      description: Switch the user's language preference by setting a cookie
      parameters:
      - description: Language switch request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/rest.SwitchLanguageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Switch language
      tags:
      - Language
  /api/v1/notifications:
    get:
      consumes:
      - application/json
      description: Get a list of notifications for the current user
      parameters:
      - description: Filter by status (unread, read, archived)
        in: query
        name: status
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get user notifications
      tags:
      - notifications
    post:
      consumes:
      - application/json
      description: Create a new notification (admin only)
      parameters:
      - description: Notification Details
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/rest.CreateNotificationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Notification'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create notification
      tags:
      - notifications
  /api/v1/notifications/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a notification
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete notification
      tags:
      - notifications
    get:
      consumes:
      - application/json
      description: Get a notification by ID
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Notification'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get notification
      tags:
      - notifications
  /api/v1/notifications/{id}/archive:
    put:
      consumes:
      - application/json
      description: Mark a notification as archived
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Mark notification as archived
      tags:
      - notifications
  /api/v1/notifications/{id}/read:
    put:
      consumes:
      - application/json
      description: Mark a notification as read
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Mark notification as read
      tags:
      - notifications
  /api/v1/notifications/count:
    get:
      consumes:
      - application/json
      description: Get the count of unread notifications for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Count unread notifications
      tags:
      - notifications
  /api/v1/notifications/read-all:
    put:
      consumes:
      - application/json
      description: Mark all notifications as read for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Mark all notifications as read
      tags:
      - notifications
  /api/v1/notifications/send/order-status:
    post:
      consumes:
      - application/json
      description: Send a notification about an order status change
      parameters:
      - description: Notification Details
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/rest.SendOrderStatusNotificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Send order status notification
      tags:
      - notifications
  /api/v1/notifications/send/payment:
    post:
      consumes:
      - application/json
      description: Send a notification about a payment
      parameters:
      - description: Notification Details
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/rest.SendPaymentNotificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Send payment notification
      tags:
      - notifications
  /api/v1/notifications/send/shipping:
    post:
      consumes:
      - application/json
      description: Send a notification about shipping
      parameters:
      - description: Notification Details
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/rest.SendShippingNotificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Send shipping notification
      tags:
      - notifications
  /api/v1/notifications/send/system:
    post:
      consumes:
      - application/json
      description: Send a system notification to a user
      parameters:
      - description: Notification Details
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/rest.SendSystemNotificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Send system notification
      tags:
      - notifications
  /api/v1/notifications/templates:
    get:
      consumes:
      - application/json
      description: Get a list of notification templates (admin only)
      parameters:
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.NotificationTemplate'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List notification templates
      tags:
      - notifications
    post:
      consumes:
      - application/json
      description: Create a new notification template (admin only)
      parameters:
      - description: Template Details
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/rest.CreateNotificationTemplateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.NotificationTemplate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create notification template
      tags:
      - notifications
  /api/v1/notifications/templates/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a notification template (admin only)
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete notification template
      tags:
      - notifications
    get:
      consumes:
      - application/json
      description: Get a notification template by ID (admin only)
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.NotificationTemplate'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get notification template
      tags:
      - notifications
    put:
      consumes:
      - application/json
      description: Update an existing notification template (admin only)
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      - description: Template Details
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/rest.CreateNotificationTemplateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.NotificationTemplate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update notification template
      tags:
      - notifications
  /api/v1/payments/customer/{customerId}/methods:
    get:
      consumes:
      - application/json
      description: Get a list of payment methods for a customer
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.CustomerPaymentMethod'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List customer payment methods
      tags:
      - payments
  /api/v1/payments/customer/methods:
    post:
      consumes:
      - application/json
      description: Create a new payment method for a customer
      parameters:
      - description: Customer Payment Method Details
        in: body
        name: method
        required: true
        schema:
          $ref: '#/definitions/rest.CreateCustomerPaymentMethodRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.CustomerPaymentMethod'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create customer payment method
      tags:
      - payments
  /api/v1/payments/customer/methods/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a customer payment method
      parameters:
      - description: Customer Payment Method ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete customer payment method
      tags:
      - payments
    get:
      consumes:
      - application/json
      description: Get a customer payment method by ID
      parameters:
      - description: Customer Payment Method ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.CustomerPaymentMethod'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get customer payment method
      tags:
      - payments
    put:
      consumes:
      - application/json
      description: Update an existing customer payment method
      parameters:
      - description: Customer Payment Method ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer Payment Method Details
        in: body
        name: method
        required: true
        schema:
          $ref: '#/definitions/rest.CreateCustomerPaymentMethodRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.CustomerPaymentMethod'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update customer payment method
      tags:
      - payments
  /api/v1/payments/customer/methods/{id}/default:
    put:
      consumes:
      - application/json
      description: Set a payment method as the default for a customer
      parameters:
      - description: Customer Payment Method ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Set default payment method
      tags:
      - payments
  /api/v1/payments/gateways:
    get:
      consumes:
      - application/json
      description: Get a list of payment gateways
      parameters:
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.PaymentGateway'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List payment gateways
      tags:
      - payments
    post:
      consumes:
      - application/json
      description: Create a new payment gateway
      parameters:
      - description: Payment Gateway Details
        in: body
        name: gateway
        required: true
        schema:
          $ref: '#/definitions/rest.CreatePaymentGatewayRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.PaymentGateway'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create payment gateway
      tags:
      - payments
  /api/v1/payments/gateways/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a payment gateway
      parameters:
      - description: Payment Gateway ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete payment gateway
      tags:
      - payments
    get:
      consumes:
      - application/json
      description: Get a payment gateway by ID
      parameters:
      - description: Payment Gateway ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.PaymentGateway'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get payment gateway
      tags:
      - payments
    put:
      consumes:
      - application/json
      description: Update an existing payment gateway
      parameters:
      - description: Payment Gateway ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment Gateway Details
        in: body
        name: gateway
        required: true
        schema:
          $ref: '#/definitions/rest.CreatePaymentGatewayRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.PaymentGateway'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update payment gateway
      tags:
      - payments
  /api/v1/payments/methods:
    get:
      consumes:
      - application/json
      description: Get a list of available payment methods
      parameters:
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.PaymentMethod'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List payment methods
      tags:
      - payments
    post:
      consumes:
      - application/json
      description: Create a new payment method
      parameters:
      - description: Payment Method Details
        in: body
        name: method
        required: true
        schema:
          $ref: '#/definitions/rest.CreatePaymentMethodRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.PaymentMethod'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create payment method
      tags:
      - payments
  /api/v1/payments/methods/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a payment method
      parameters:
      - description: Payment Method ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete payment method
      tags:
      - payments
    get:
      consumes:
      - application/json
      description: Get a payment method by ID
      parameters:
      - description: Payment Method ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.PaymentMethod'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get payment method
      tags:
      - payments
    put:
      consumes:
      - application/json
      description: Update an existing payment method
      parameters:
      - description: Payment Method ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment Method Details
        in: body
        name: method
        required: true
        schema:
          $ref: '#/definitions/rest.CreatePaymentMethodRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.PaymentMethod'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update payment method
      tags:
      - payments
  /api/v1/payments/process:
    post:
      consumes:
      - application/json
      description: Process a payment for an order
      parameters:
      - description: Payment Details
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/rest.ProcessPaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.PaymentInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Process payment
      tags:
      - payments
  /api/v1/payments/refund:
    post:
      consumes:
      - application/json
      description: Refund a payment for an order
      parameters:
      - description: Refund Details
        in: body
        name: refund
        required: true
        schema:
          $ref: '#/definitions/rest.RefundPaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Refund payment
      tags:
      - payments
  /api/v1/payments/verify/{transactionId}:
    get:
      consumes:
      - application/json
      description: Verify a payment transaction
      parameters:
      - description: Transaction ID
        in: path
        name: transactionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Verify payment
      tags:
      - payments
  /api/v1/shipping/calculate:
    post:
      consumes:
      - application/json
      description: Calculate shipping costs for a set of items to a specific country
      parameters:
      - description: Calculation Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/rest.CalculateShippingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Calculate shipping costs
      tags:
      - shipping
  /api/v1/shipping/methods:
    get:
      consumes:
      - application/json
      description: Get a list of available shipping methods
      parameters:
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.ShippingMethod'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List shipping methods
      tags:
      - shipping
    post:
      consumes:
      - application/json
      description: Create a new shipping method
      parameters:
      - description: Shipping Method Details
        in: body
        name: method
        required: true
        schema:
          $ref: '#/definitions/rest.CreateShippingMethodRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.ShippingMethod'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create shipping method
      tags:
      - shipping
  /api/v1/shipping/methods/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a shipping method
      parameters:
      - description: Shipping Method ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete shipping method
      tags:
      - shipping
    get:
      consumes:
      - application/json
      description: Get a shipping method by ID
      parameters:
      - description: Shipping Method ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.ShippingMethod'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get shipping method
      tags:
      - shipping
    put:
      consumes:
      - application/json
      description: Update an existing shipping method
      parameters:
      - description: Shipping Method ID
        in: path
        name: id
        required: true
        type: string
      - description: Shipping Method Details
        in: body
        name: method
        required: true
        schema:
          $ref: '#/definitions/rest.CreateShippingMethodRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.ShippingMethod'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update shipping method
      tags:
      - shipping
  /api/v1/shipping/rates:
    get:
      consumes:
      - application/json
      description: Get a list of shipping rates
      parameters:
      - description: Filter by Zone ID
        in: query
        name: zone_id
        type: string
      - description: Filter by Method ID
        in: query
        name: method_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.ShippingRate'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List shipping rates
      tags:
      - shipping
    post:
      consumes:
      - application/json
      description: Create a new shipping rate
      parameters:
      - description: Shipping Rate Details
        in: body
        name: rate
        required: true
        schema:
          $ref: '#/definitions/rest.CreateShippingRateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.ShippingRate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create shipping rate
      tags:
      - shipping
  /api/v1/shipping/rates/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a shipping rate
      parameters:
      - description: Shipping Rate ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete shipping rate
      tags:
      - shipping
    get:
      consumes:
      - application/json
      description: Get a shipping rate by ID
      parameters:
      - description: Shipping Rate ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.ShippingRate'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get shipping rate
      tags:
      - shipping
    put:
      consumes:
      - application/json
      description: Update an existing shipping rate
      parameters:
      - description: Shipping Rate ID
        in: path
        name: id
        required: true
        type: string
      - description: Shipping Rate Details
        in: body
        name: rate
        required: true
        schema:
          $ref: '#/definitions/rest.CreateShippingRateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.ShippingRate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update shipping rate
      tags:
      - shipping
  /api/v1/shipping/zones:
    get:
      consumes:
      - application/json
      description: Get a list of shipping zones
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.ShippingZone'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List shipping zones
      tags:
      - shipping
    post:
      consumes:
      - application/json
      description: Create a new shipping zone
      parameters:
      - description: Shipping Zone Details
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/rest.CreateShippingZoneRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.ShippingZone'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create shipping zone
      tags:
      - shipping
  /api/v1/shipping/zones/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a shipping zone
      parameters:
      - description: Shipping Zone ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete shipping zone
      tags:
      - shipping
    get:
      consumes:
      - application/json
      description: Get a shipping zone by ID
      parameters:
      - description: Shipping Zone ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.ShippingZone'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get shipping zone
      tags:
      - shipping
    put:
      consumes:
      - application/json
      description: Update an existing shipping zone
      parameters:
      - description: Shipping Zone ID
        in: path
        name: id
        required: true
        type: string
      - description: Shipping Zone Details
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/rest.CreateShippingZoneRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.ShippingZone'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update shipping zone
      tags:
      - shipping
  /api/v1/wishlist:
    get:
      consumes:
      - application/json
      description: Retrieves the current user's wishlist
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Wishlist'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get user's wishlist
      tags:
      - wishlist
  /api/v1/wishlist/check/{productId}:
    get:
      consumes:
      - application/json
      description: Checks if a product is in the user's wishlist
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Variation ID
        in: query
        name: variationId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Check if product is in wishlist
      tags:
      - wishlist
  /api/v1/wishlist/items:
    delete:
      consumes:
      - application/json
      description: Removes all items from the user's wishlist
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Clear wishlist
      tags:
      - wishlist
    post:
      consumes:
      - application/json
      description: Adds a product to the user's wishlist
      parameters:
      - description: Item to add
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/rest.AddItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.WishlistItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Add item to wishlist
      tags:
      - wishlist
  /api/v1/wishlist/items/{itemId}:
    delete:
      consumes:
      - application/json
      description: Removes an item from the user's wishlist
      parameters:
      - description: Item ID
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Remove item from wishlist
      tags:
      - wishlist
  /categories:
    get:
      description: Get a paginated list of categories with optional filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category with the provided details
      parameters:
      - description: Category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/rest.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create a new category
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Delete a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete a category
      tags:
      - categories
    get:
      description: Get detailed information about a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get a category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update an existing category with the provided details
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/rest.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update a category
      tags:
      - categories
  /categories/{id}/children:
    get:
      description: Get all direct child categories of a parent category
      parameters:
      - description: Parent Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Category'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get child categories
      tags:
      - categories
  /categories/{id}/products:
    get:
      description: Get products in a category and optionally its subcategories
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Include products from subcategories
        in: query
        name: include_subcategories
        type: boolean
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get products by category
      tags:
      - categories
  /categories/{id}/tree:
    get:
      description: Get a complete category tree starting from a root category
      parameters:
      - description: Root Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get category tree
      tags:
      - categories
  /categories/root:
    get:
      description: Get all top-level categories (with no parent)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get root categories
      tags:
      - categories
  /categories/slug/{slug}:
    get:
      description: Get detailed information about a category by its slug
      parameters:
      - description: Category Slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get a category by slug
      tags:
      - categories
  /orders:
    get:
      description: Get a list of orders with optional filtering and pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order for a customer
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/rest.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    get:
      description: Get detailed information about an order by its ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get an order by ID
      tags:
      - orders
  /orders/{id}/items:
    delete:
      consumes:
      - application/json
      description: Remove a product variation from an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Item to remove
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/rest.RemoveItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item removed successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Remove an item from an order
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Add a product variation to an existing order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Item details
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/rest.OrderItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item added successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Add an item to an order
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update the quantity of an item in an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Item details with new quantity
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/rest.OrderItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item quantity updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update item quantity
      tags:
      - orders
  /orders/{id}/payment:
    put:
      consumes:
      - application/json
      description: Set payment information for an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment information
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/rest.PaymentInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Payment information set successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Set payment information
      tags:
      - orders
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: New status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/rest.UpdateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order status updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update order status
      tags:
      - orders
  /orders/{id}/tracking:
    put:
      consumes:
      - application/json
      description: Set shipping tracking information for an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Tracking information
        in: body
        name: tracking
        required: true
        schema:
          $ref: '#/definitions/rest.TrackingInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tracking information set successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Set tracking information
      tags:
      - orders
  /orders/customer/{customerId}:
    get:
      description: Get a list of orders for a specific customer
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get orders for a customer
      tags:
      - orders
  /products:
    get:
      description: Get a list of products with optional filtering and pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided details
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/rest.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete a product
      tags:
      - products
    get:
      description: Get detailed information about a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product's details
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/rest.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update a product
      tags:
      - products
  /products/{id}/stock:
    put:
      consumes:
      - application/json
      description: Update the stock quantity of a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Stock update details
        in: body
        name: stock
        required: true
        schema:
          $ref: '#/definitions/rest.StockUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Stock updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update product stock
      tags:
      - products
  /products/category/{category}:
    get:
      description: Get a list of products in a specific category
      parameters:
      - description: Category name
        in: path
        name: category
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get products by category
      tags:
      - products
  /users:
    get:
      description: Get a list of users with optional role filtering and pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by user role (customer or admin)
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List users with filtering
      tags:
      - users
  /users/{id}:
    get:
      description: Get detailed information about a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's profile information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/rest.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update a user
      tags:
      - users
  /users/{id}/addresses:
    get:
      description: Get all addresses for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Address'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get user addresses
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add a new address for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Address details
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/rest.AddressRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Address'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Add a new address
      tags:
      - users
  /users/{id}/addresses/{addressId}:
    delete:
      description: Delete an address for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Address ID
        in: path
        name: addressId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Address deleted successfully
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete an address
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing address for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Address ID
        in: path
        name: addressId
        required: true
        type: string
      - description: Updated address details
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/rest.AddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Address updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update an address
      tags:
      - users
  /users/{id}/addresses/{addressId}/default:
    put:
      description: Set an address as the default for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Address ID
        in: path
        name: addressId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Default address set successfully
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Set default address
      tags:
      - users
  /users/{id}/orders:
    get:
      description: Get all orders for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.PaginatedResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get user orders
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Change a user's password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Password change details
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/rest.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Change a user's password
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/rest.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Login a user
      tags:
      - users
  /users/me:
    get:
      description: Get the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current user profile
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/rest.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Register a new user
      tags:
      - users
  /users/send-otp:
    post:
      consumes:
      - application/json
      description: Saves OTP Inside redis and send send it to phone number
      parameters:
      - description: Send OTP credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/rest.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Send OTP
      tags:
      - users
schemes:
- http
swagger: "2.0"
