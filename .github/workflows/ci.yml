name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - main

jobs:
  backend-build:
    name: Build and Test Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate Swagger docs
        run: swag init -g main.go -o ./docs

      - name: Build application
        run: go build -v -o build/groceries-api ./main.go

      - name: Run tests
        run: |
          if ls *_test.go 1> /dev/null 2>&1 || find . -name "*_test.go" | grep -q .; then
            go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          else
            echo "No tests found, skipping test execution"
          fi

      - name: Upload coverage to artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: coverage.out
          if-no-files-found: ignore

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [backend-build]
    if: always()

    steps:
      - name: Check build results
        run: |
          echo "Backend Build: ${{ needs.backend-build.result }}"

          if [[ "${{ needs.backend-build.result }}" != "success" ]]; then
            echo "‚ùå Backend build failed"
            exit 1
          else
            echo "‚úÖ Backend build passed successfully"
          fi

  deploy:
    name: Deploy to VPS with Docker
    runs-on: ubuntu-latest
    needs: [backend-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: 22
          source: "./main.go,./cmd,./internal,./Dockerfile,./docker-compose.yml,./go.mod,./go.sum"
          target: "/home/groceries/backend"
          strip_components: 0

      - name: Deploy with Docker Compose on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 91.99.95.75
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            cd /home/groceries/backend
            echo "üì¶ Pulling latest code..."
            echo "üõë Stopping existing containers..."
            docker-compose down || true
            echo "üî® Building Docker images..."
            docker-compose build --no-cache
            echo "üöÄ Starting containers..."
            docker-compose up -d
            echo "‚è≥ Waiting for services to be healthy..."
            sleep 10
            echo "üìä Container status:"
            docker-compose ps
            echo "üìã Recent logs:"
            docker-compose logs --tail=50
            echo "‚úÖ Deployment completed!"

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 91.99.95.75
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            echo "üîç Verifying deployment..."
            curl -f http://localhost/api/v1/health || echo "‚ö†Ô∏è Health check failed"
            docker-compose ps
