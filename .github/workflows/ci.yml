name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - main

jobs:
  backend-build:
    name: Build and Test Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate Swagger docs
        run: swag init -g main.go -o ./docs

      - name: Build application
        run: go build -v -o build/groceries-api ./main.go

      - name: Run tests
        run: |
          if ls *_test.go 1> /dev/null 2>&1 || find . -name "*_test.go" | grep -q .; then
            go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          else
            echo "No tests found, skipping test execution"
          fi

      - name: Upload coverage to artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: coverage.out
          if-no-files-found: ignore

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [backend-build]
    if: always()

    steps:
      - name: Check build results
        run: |
          echo "Backend Build: ${{ needs.backend-build.result }}"

          if [[ "${{ needs.backend-build.result }}" != "success" ]]; then
            echo "❌ Backend build failed"
            exit 1
          else
            echo "✅ Backend build passed successfully"
          fi

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [backend-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 91.99.95.75
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Create directory if it doesn't exist
            mkdir -p /opt/groceries-backend
            cd /opt/groceries-backend

            # Check if it's a git repository
            if [ ! -d .git ]; then
              echo "Not a git repository, initializing..."
              # Backup docker-compose if exists
              if [ -f docker-compose.yml ]; then
                cp docker-compose.yml docker-compose.yml.backup
              fi
              # Initialize git repo
              git init
              git remote add origin ${{ github.event.repository.clone_url }}
              git fetch origin
              git checkout -b main origin/main
              # Restore docker-compose if backed up
              if [ -f docker-compose.yml.backup ]; then
                mv docker-compose.yml.backup docker-compose.yml
              fi
            else
              git pull origin main
            fi

            # Ensure deploy.sh exists, if not create it
            if [ ! -f deploy.sh ]; then
              cat > deploy.sh << 'DEPLOYEOF'
            #!/bin/bash
            set -e
            print_info() { echo "[INFO] $1"; }
            deploy() {
              print_info "Starting deployment..."
              docker-compose down || true
              print_info "Building Docker images..."
              docker-compose build --no-cache
              print_info "Starting containers..."
              docker-compose up -d
              print_info "Waiting for services..."
              sleep 10
              docker-compose ps
              docker-compose logs --tail=50
              print_info "Deployment completed!"
            }
            status() {
              print_info "Current deployment status:"
              docker-compose ps
              if curl -f http://localhost/api/v1/health > /dev/null 2>&1; then
                print_info "Health check passed ✓"
              fi
              docker-compose logs --tail=20
            }
            case "$1" in
              deploy) deploy ;;
              status) status ;;
              *) echo "Usage: $0 {deploy|status}"; exit 1 ;;
            esac
            DEPLOYEOF
              chmod +x deploy.sh
            fi

            # Run deployment
            ./deploy.sh deploy

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 91.99.95.75
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /opt/groceries-backend
            if [ -f deploy.sh ]; then
              ./deploy.sh status
            fi

            # Wait for health check
            sleep 30

            # Test if the application is responding
            curl -f http://localhost/api/v1/health || exit 1
            echo "✅ Deployment verification successful"
